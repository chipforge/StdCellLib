#!/usr/bin/perl -w

my @cells=map { s/\.cell$//; s/\.truthtable\.v$//; $_; } (defined($ARGV[0]) && -f $ARGV[0])?[$ARGV[0]]:<*.cell>;


print <<EOF
// This file has been auto-generated by the testgen.pl
// It is a test-firmware for Caravel to automatically test all standard cells that are placed on the test-design, one by one, trying all possible input combinations and checking all outputs with assertions.
#include "../../defs.h"
#include "../../stub.c"
EOF
;


foreach my $cell (@cells)
{
  next unless(-f "$cell.truthtable.txt");
 
  open IN,"<$cell.truthtable.txt";

  my $header=<IN>; $header=~s/\s$//s;
  print "// Cell: $cell ($header)\n";

  #print STDERR $header;
  my @l=split "->",$header;
  my @ins=split " ",$l[0];
  my @outs=split " ",$l[1];
  my %map=();

  my $reg=0;
  my @io=();
  print " printf(\"Connecting Inputs of the cell $cell with the management core:\\n\");\n";
  foreach(@ins)
  {
    print "  reg_mprj_io_$reg = GPIO_MODE_MGMT_STD_INPUT; // $_\n";
    $io[$reg>>5]|=1<<($reg&31);
    $reg++;
  }
  print " printf(\"Connecting the Outputs of the cell $cell with the management core:\\n\");\n";
  foreach(@outs)
  {
    $map{$_}=$reg++;
    print "  reg_mprj_io_$reg = GPIO_MODE_MGMT_STD_OUTPUT; // $_\n";
  }

  print "  reg_mprj_xfer=1;\n";
  print "  while (reg_mprj_xfer == 1);\n";

  foreach(0 .. 3)
  {
    print "  reg_la".$_."_ena=".sprintf("0x%08X",$io[$_]).";\n" if(defined($io[$_]));
  }

  my $counter=0;
  print " printf(\"Starting the tests:\\n\");\n";

  while(<IN>)
  {
    last if(m/^function:/);
    @l=split " ",$_;
    my $if=0;
    foreach(@l)
    {
      if(m/(\w+)=(\d)/)
      {
        print "  assert(reg_la".$map{$1}."_data==$2); //$1\n";
      }
      else
      {
        print "  reg_la".$if."_data=$_; //$ins[$if]\n";
      }
      $if++;
    }
    print "  printf(\"Test $counter for cell $cell successful\\n\");\n\n";
  
    $counter++;
  }
  print "printf(\"Tests for $cell successful.\\n\");\n\n";
  close IN;
}

print "printf(\"All standard cells have been tested successfully.\\n\")\n\n";

