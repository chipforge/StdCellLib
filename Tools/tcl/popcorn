#!/usr/bin/env tclsh
#   ************    LibreSilicon's StdCellLibrary   *******************
#
#   Organisation:   Chipforge
#                   Germany / European Union
#
#   Profile:        Chipforge focus on fine System-on-Chip Cores in
#                   Verilog HDL Code which are easy understandable and
#                   adjustable. For further information see
#                           www.chipforge.org
#                   there are projects from small cores up to PCBs, too.
#
#   File:           popcorn
#
#   Purpose:        Generates a bunch of combinatorial cells
#
#   ************    Tcl 8.6 Shell Script    ***************************
#
#   ///////////////////////////////////////////////////////////////////
#
#       Copyright (c)   2018 by
#                       SANKOWSKI, Hagen - hsank@nospam.chipforge.org
#
#   This source file may be used and distributed without restriction
#   provided that this copyright statement is not removed from the
#   file and that any derivative work contains the original copyright
#   notice and the associated disclaimer.
#
#   This source is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This source is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#    (__)  You should have received a copy of the GNU General Public
#    oo )  License along with this program; if not, write to the
#    /_/|  Free Software Foundation Inc., 51 Franklin St., 5th Floor,
#          Boston, MA 02110-1301, USA
#
#   GNU General Public License v3.0 - http://www.gnu.org/licenses/gpl-3.0.html
#   ///////////////////////////////////////////////////////////////////

#   -------------------------------------------------------------------
#                       DESCRIPTION
#   -------------------------------------------------------------------

#   This tool generates transistor networks for Standard Cells.
#   Usually - for CMOS - this transistor networks are
#       * one pull-up network, build with pmos transistors, and
#       * one pull-down network, build with nmos transistors.

#   --------*---------  vdd
#        ___|___
#       |       |
#       | pull- |
#       |  up   |
#       |_______|
#           |
#           *-------->  Y
#        ___|___
#       |       |
#       | pull- |
#       | down  |
#       |_______|
#           |
#   --------*---------  gnd

#   -------------------------------------------------------------------
#                       DEFINITIONS
#   -------------------------------------------------------------------

#   dictionary structure for cells
#   CELL {   pullup {
#                A { g A d Y s vdd t pmos } }
#            pulldown {
#                A { g A d Y s gnd t nmos } } }

# usable inputs
set table {A B C D E F G H I L M N P U V W}

# gnd=0 
# pullups are even, pulldown are odd

# cell index for unidentified cells
set cellindex 0

#   ------------    proc 'verbose!' -----------------------------------
proc verb {str} {
     global verbose
     if {$verbose} {
        puts $str
     }
}


#   ------------    proc 'export!'  -----------------------------------

#   write into fresh cell file

#   use dictionary structure
proc export! {path cellid library} { 
# path is the filename-path
# cellid is the filename string of the cell
# library is hash of all cells

    # open cell output file
    set datafile [file join $path $cellid\.cell]
    set f [open $datafile w]

    # verbose message
    verb "export: $datafile"

    # write out
    puts $f ".AUTOGENERATED by Popcorn Tcl Script"
    set myinputs [join [lsort [inputs? $cellid]] " "]
    puts $f ".inputs $myinputs"
    set myoutputs [join [lsort [outputs? $cellid]] " "]
    puts $f ".outputs $myoutputs"
    puts $f ".ORDER \"MOSFET Gate Drain Source\""

    set sorted [lsort -dictionary [dict keys [dict get [dict get $library $cellid] pullup]]]

    foreach mosfet $sorted {
        set gate   [dict get [dict get [dict get [dict get $library $cellid] pullup] $mosfet] g]
        set drain  [dict get [dict get [dict get [dict get $library $cellid] pullup] $mosfet] d]
        set source [dict get [dict get [dict get [dict get $library $cellid] pullup] $mosfet] s]
        set type   [dict get [dict get [dict get [dict get $library $cellid] pullup] $mosfet] t]
        puts $f "$type $gate $drain $source"
    }

    set sorted [lsort -dictionary [dict keys [dict get [dict get $library $cellid] pulldown]]]

    foreach mosfet $sorted {
        set gate   [dict get [dict get [dict get [dict get $library $cellid] pulldown] $mosfet] g]
        set drain  [dict get [dict get [dict get [dict get $library $cellid] pulldown] $mosfet] d]
        set source [dict get [dict get [dict get [dict get $library $cellid] pulldown] $mosfet] s]
        set type   [dict get [dict get [dict get [dict get $library $cellid] pulldown] $mosfet] t]
        puts $f "$type $gate $drain $source"
    }

    # done
    close $f
}

#   ------------    proc 'import'   -----------------------------------

#   read cell file

proc import {f} {

    dict set netlist pullup {}
    dict set netlist pulldown {}
    
    verb "read in"
    seek $f 0 start
    while {[gets $f line] >= 0} {
        if {[lsearch -glob [split $line] ".*"] == -1} {
            if {[lindex $line 0] == "pmos"} {
                verb "pullup network"
                set mosfet [lindex $line 1]
                dict set netlist pullup $mosfet {}
                dict set netlist pullup $mosfet g [lindex $line 1]
                dict set netlist pullup $mosfet d [lindex $line 2]
                dict set netlist pullup $mosfet s [lindex $line 3]
                dict set netlist pullup $mosfet t [lindex $line 0]
            } elseif {[lindex $line 0] == "nmos"} {
                verb "pulldown network"
                set mosfet [lindex $line 1]
                dict set netlist pulldown $mosfet {}
                dict set netlist pulldown $mosfet g [lindex $line 1]
                dict set netlist pulldown $mosfet d [lindex $line 2]
                dict set netlist pulldown $mosfet s [lindex $line 3]
                dict set netlist pulldown $mosfet t [lindex $line 0]
            }
        }
    }

    # done
    return $netlist
}

#   -------------------------------------------------------------------
#                       FUNCTIONS
#   -------------------------------------------------------------------

#   ------------    proc 'maxnode?' -----------------------------------

#   get highest node number in network (w/ maximum number)

proc maxnode? {netlist} {

    # work out
    set maxnode 0
    foreach pull [dict keys $netlist] {
	set network [dict get $netlist $pull]
        foreach mosfet [dict keys [dict get $netlist $pull]] { 
            foreach node [dict get $network $mosfet] {
                if {[string is entier $node] && $node > $maxnode} {
                    set maxnode $node
                }
            }
        }
    }

    # verbose message
    verb "maxnode?: $maxnode"

    # done
    return $maxnode
}

#   ------------    proc 'anchor?'  -----------------------------------

#   find free transistor anchor where column could be enlarged

proc anchor? {start end network} {

    global verbose

    proc length? {path from to network} {

        set length 0
        set result 0
        foreach mosfet [dict keys $network] {
            # check network for mosfet with $start as source
            foreach node [dict get [dict get $network $mosfet] s] {
                if {[string compare -nocase $node $from] == 0} {
                    # collect node on drain side of mosfet
                    set new [dict get [dict get $network $mosfet] d]
                    if {[string compare -nocase [dict get [dict get $network $mosfet] d] $to] == 0} {
                        if {$length == 0} {
                            # 1st founding
                            set length 1
                        }
                    } else {
                        # while current $to does not match target, go deeper and check result
                        set result [expr [length? [list $path $mosfet] [dict get [dict get $network $mosfet] d] $to $network] +1]
                        if {$result > $length} {
                            # means, last recursive call gots a longer path
                            set length $result
                        }
                    }
                }
            }
        }
        return $length
    }

    # work out
    set anchor A
    set result 0
    foreach mosfet [dict keys $network] {
        # check network for mosfet with $start as source
        foreach node [dict get [dict get $network $mosfet] s] {
            if {[string compare -nocase $node $start] == 0} {
                set result [length? {} $node $end $network]
                set anchor $mosfet
            }
        }
    }


    # verbose message
    if {$verbose} {
        puts "anchor?: $anchor"
        #set enter [gets stdin]
    }

    # done
    return $anchor
}

#   ------------    proc 'anchor_pullup?'   ---------------------------

#   find first transistor in pullup network which has to extend

proc anchor_pullup? {netlist} {

    # wraper
    return [anchor? "vdd" "Y" [dict get $netlist pullup]]
}

#   ------------    proc 'anchor_pulldown?'     -----------------------

#   find first transistor in pulldown network which has to extend

proc anchor_pulldown? {netlist} {

    # wraper
    return [anchor? "gnd" "Y" [dict get $netlist pulldown]]
}

#   ------------    proc 'input_number!'    ---------------------------

#   generate input (gate) name from $input following the numbers
#   Examples: A -> A1 , A3 -> A4

proc input_number! {input} {

    # work out
    set number 1
    set char [string range $input 0 0]
    if {[string length $input] > 1} {
        # input (gate) name already has a number
        set number [expr [string range $input 1 end] +1]
    }
    # combine char and number
    set input [string cat $char $number]

    # verbose message
    verb "input_number!: $input"

    # done
    return $input
}

#   ------------    proc 'input_char!'  -------------------------------

#   generate input (gate) name from $input following the alphabet
#   Example: B -> C

proc input_char! {input} {

    global table

    # work out
    set new_input [lindex $table [expr [lsearch -exact $table $input] +1]]

    # verbose message
    verb "input_char!: $input > $new_input"

    # done
    return $new_input
}

#   ------------    proc 'inputs?'  -----------------------------------

#   list all inputs involved in any network in a decreasing order
#   Netlist -> [B1,B,A]

proc inputs? {cellid} {

    global library

    # collect all inputs from all networks
    set unsorted {}
    foreach mosfet [dict keys [dict get [dict get $library $cellid] pullup]] {
        lappend unsorted $mosfet
    }
    foreach mosfet [dict keys [dict get [dict get $library $cellid] pulldown]] {
        lappend unsorted $mosfet
    }

    # sort inputs
    set inputs [lsort -decreasing -unique -dictionary $unsorted]

    # remove internal nodes
    if {[lindex $inputs 0] == "Y"} {
        verb "We found the intermediate node Y so remove it from the inputs"
        set inputs [lreplace $inputs 0 0]
    }

    # verbose message
    verb "inputs?: $inputs"

    # done
    return $inputs
}

#   ------------    proc 'outputs?'  -----------------------------------

#   list all outputs involved in any network in a decreasing order
#   Netlist -> [Z,Y]

proc outputs? {cellid} {

    global netlist

    set network [dict get $netlist pulldown]
    foreach mosfet [dict keys [dict get $network]] { 

        set drain  [dict get [dict get $network $mosfet] d]
        if {$drain == "Z"} {
            return "Z"
        }
    }

    return "Y"
}


#   ------------    proc 'enlarge_nand!'    ---------------------------

#   find gap in fully developed pulldown network and enlarge both networks

proc enlarge_nand! {nameing netlist} {

    verb "enlarge_nand!"
    verb "start with pulldown network"
    set network [dict get $netlist pulldown]
    verb "find anchor transistor"
    set original [anchor_pulldown? $netlist] 

    verb "checking original"
    if {$original eq {}} {
        set netlist {}
    } else {

        verb "prepare replacement"
        set inode  [expr [maxnode? $netlist] +1] ; # get highest node, add 2, for connectivity
        set gate   [dict get [dict get $network $original] g] ; # get gate name
        set drain  [dict get [dict get $network $original] d] ; # get drain side node name / number
        set src    [dict get [dict get $network $original] s] ; # get source side node name / number
        set type   [dict get [dict get $network $original] t] ; # get transistor type

        verb "generate replacement for original with higher node on source"
        dict set orgfet g $original
        dict set orgfet d $drain
        dict set orgfet s $inode ; # intermediate node number
        dict set orgfet t $type

        verb "generate next mosfet name regarding 'proc naming'"
        if {$nameing eq "number"} {
            set newname [input_number! $gate]
        } else {
            set newname [input_char! $gate]
        }

        verb "generate next mosfet itself"
        dict set newfet g $newname
        dict set newfet d $inode
        dict set newfet s $src
        dict set newfet t $type

        verb "build new pulldown network"
        dict set pulldown $newname $newfet
        dict for {key value} $network {
            if {$key eq $original} {
                dict set pulldown $original $orgfet
            } else {
                dict set pulldown $key $value
            }
        }

        verb "follow up with pullup network"
        set network [dict get $netlist pullup]

        verb "prepare replacement now on pullup network $original"
        set gate   [dict get [dict get $network $original] g] ; # get gate name
        set drain  [dict get [dict get $network $original] d] ; # get drain side node name / number
        set src    [dict get [dict get $network $original] s] ; # get source side node name / number
        set type   [dict get [dict get $network $original] t] ; # get transistor type

        verb "generate newfet as \"original double\""
        dict set newfet g $newname ; # just change the input gate / name
        dict set newfet d $drain
        dict set newfet s $src
        dict set newfet t $type

        # build new pullup network
        dict set pullup $newname $newfet
        dict for {key value} $network {
            dict set pullup $key $value
        }
    }

    dict set netlist pullup $pullup
    dict set netlist pulldown $pulldown

    # verbose message
    verb "enlarge_nand!: $netlist"

    # done
    return $netlist
}

#   ------------    proc 'enlarge_nor!'     ---------------------------

#   find gap in fully developed pullup network and enlarge both networks

proc enlarge_nor! {nameing netlist} {

    verb "enlarge_nor!"
    verb "start with pullup network"
    set network [dict get $netlist pullup]
    set original [anchor_pullup? $netlist] ; # find anchor transistor

    if {$original eq {}} {
        set netlist {}
    } else {

        # prepare replacement
        set inode  [expr [maxnode? $netlist] +1] ; # get highest node, add 2, for connectivity
        set gate   [dict get [dict get $network $original] g] ; # get gate name
        set drain  [dict get [dict get $network $original] d] ; # get drain side node name / number
        set src    [dict get [dict get $network $original] s] ; # get source side node name / number
        set type   [dict get [dict get $network $original] t] ; # get transistor type

        # generate replacement for original with higher node on source
        dict set orgfet g $original
        dict set orgfet d $drain
        dict set orgfet s $inode ; # intermediate node number
        dict set orgfet t $type

        # generate next mosfet name regarding 'proc naming'
        if {$nameing eq "number"} {
            set newname [input_number! $gate]
        } else {
            set newname [input_char! $gate]
        }

        # generate next mosfet itself
        dict set newfet g $newname
        dict set newfet d $inode
        dict set newfet s $src
        dict set newfet t $type

        # build new pullup network
        dict set pullup $newname $newfet
        dict for {key value} $network {
            if {$key eq $original} {
                dict set pullup $original $orgfet
            } else {
                dict set pullup $key $value
            }
        }

        # follow up with pulldown network
        set network [dict get $netlist pulldown]

        # prepare replacement now on pulldown network
        set gate   [dict get [dict get $network $original] g] ; # get gate name
        set drain  [dict get [dict get $network $original] d] ; # get drain side node name / number
        set src    [dict get [dict get $network $original] s] ; # get source side node name / number
        set type   [dict get [dict get $network $original] t] ; # get transistor type

        # generate newfet as "original double"
        dict set newfet g $newname ; # just change the input gate / name
        dict set newfet d $drain
        dict set newfet s $src
        dict set newfet t $type

        # build new pulldown network
        dict set pulldown $newname $newfet
        dict for {key value} $network {
            dict set pulldown $key $value
        }
    }

    dict set netlist pullup $pullup
    dict set netlist pulldown $pulldown

    # verbose message
    verb "enlarge_nor!: $netlist"

    # done
    return $netlist
}

#   ------------    proc 'enlarge_inv!'     ---------------------------

#   insert buffering inverter before output

proc enlarge_inv! {netlist} {

    verb "enlarge_inv!"
    verb "start with pullup network"
    set network [dict get $netlist pullup]

    # generate next pullup mosfet
    dict set newfet g "Y"
    dict set newfet d "Z"
    dict set newfet s "vdd"
    dict set newfet t "pmos"

    # build new pulldown network
    dict set pullup "Y" $newfet
    dict for {key value} $network {
        dict set pullup $key $value
    }

    # follow up with pulldown network
    set network [dict get $netlist pulldown]

    # generate next pulldown mosfet
    dict set newfet g "Y"
    dict set newfet d "Z"
    dict set newfet s "gnd"
    dict set newfet t "nmos"

    # build new pulldown network
    dict set pulldown "Y" $newfet
    dict for {key value} $network {
        dict set pulldown $key $value
    }

    dict set netlist pullup $pullup
    dict set netlist pulldown $pulldown

    # verbose message
    verb "enlarge_inv!: $netlist"

    # done
    return $netlist
}

#   -------------------------------------------------------------------
#                       MAIN
#   -------------------------------------------------------------------

#   ------------    Command line parsing     --------------------------

package require cmdline;

#   define program options
set options {
    {o.arg "./"         "specify output directory - default" }
    {c.arg "CELL"       "specify new cell name - default" }
    {n.arg "nand"       "enlarge cell - nand nor aoi oai - default"}
    {l.arg "4"          "limit the number of transistors from power/gnd to output" }
    {b                  "enlarge cell - add inverting buffer"}
    {v                  "verbose" }
}

#   define program usage
set usage "- Generate a bunch of combinatorial cells"

#   error trap
try {
    array set params [cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
    # Trap the usage signal, print the massage, and exit the application.
    # Note: Others errors are not caught and passed through to higher levels!
    puts $msg
    exit -1 
}

#   set argv from command lines
set option_original [lindex $argv end end] ; # input file
set option_path $params(o) ; # output directory
set option_newcell [string map {".cell" ""} $params(c)]; # new cellid
set option_enlarge $params(n) ; 
set option_buffer $params(b) ; 
set option_limit $params(l) ; # maximum number of transistors
set verbose $params(v); 

#   verbose message
if {$verbose} {
    puts "[clock format [clock seconds] -gmt 1]"
    puts "option_original: $option_original"
    puts "option_newcell (-c):  $option_newcell"
    puts "option_path (-o): $option_path"
    puts "option_enlarge (-n): $option_enlarge"
    puts "option_buffer (-b): $option_buffer"
    puts "option_limit (-l): $option_limit"
}

#   ------------    cell generation     -------------------------------

    proc cellname! {nameing cellid group} {

        global table
        global cellindex

        # work out
        switch -glob -- $cellid {
            NAND*   {set index 3 }
            NOR*    {set index 2 }
            AOI*    {set index 2 }
            XOR*    {set index 2 }
            OAI*    {set index 2 }
            AO*     {set index 1 }
            EQ*     {set index 1 }
            OA*     {set index 1 }
            default {break}
        }

        set cellname $group ; # [string range $cellid 0 $index]

        # evaluate numbering
        set number ""
        if {$nameing eq "number"} {

            # initialize scorebard
            foreach char $table {
                set scoreboard($char) 0
            }
            # count up input occurances
            foreach char [inputs? $cellid] {
                incr scoreboard([string range $char 0 0])
            }
            # concatinate
            foreach char $table {
                if {$scoreboard($char) > 0} {
                    set number [string cat $scoreboard($char) $number]
                }
            }
        } elseif {$nameing eq "char"} {
            set number [llength [inputs? $cellid]]
        } else {
            incr cellindex
            set number $cellindex
        }

        set cell [string cat $cellname $number]

        verb "cellname!: $cell"

        return $cell
    }

#set cellid NOR2
#norgroup! NOR2 [dict get $library $cellid]
#
#set cellid NAND2
#nandgroup! NAND2 [dict get $library $cellid]
#
#set cellid NOR2
#aoigroup! NOR2 [dict get $library $cellid]
#
#set cellid NOR3
#aoigroup! NOR3 [dict get $library $cellid]
#
##set cellid NOR4
##aoigroup! NOR4 [dict get $library $cellid]
#
#set cellid NAND2
#oaigroup! NAND2 [dict get $library $cellid]
#
#set cellid NAND3
#oaigroup! NAND3 [dict get $library $cellid]
#
##set cellid NAND4
##oaigroup! NAND4 [dict get $library $cellid]



#dict set library OAI21 [enlarge_nor! "number" [dict get $library NAND2]]
#dict set library OAI31 [enlarge_nor! "number" [dict get $library OAI21]]
#dict set library OAI41 [enlarge_nor! "number" [dict get $library OAI31]]

#dict set library OAI211 [enlarge_nor! "number" [dict get $library NAND3]]
#dict set library OAI311 [enlarge_nor! "number" [dict get $library OAI211]]
#dict set library OAI411 [enlarge_nor! "number" [dict get $library OAI311]]

#dict set library AOI21 [enlarge_nand! "number" [dict get $library NOR2]]
#dict set library AOI31 [enlarge_nand! "number" [dict get $library AOI21]]
#dict set library AOI41 [enlarge_nand! "number" [dict get $library AOI31]]

#   ------------    main    -------------------------------------------

if {[file exist $option_original]} {

    verb "unplug cellid"
    set cellid [lindex [split [file tail $option_original] "."] 0]

    verb "open cell input file"
    set fin [open $option_original r]

    set netlist [import $fin]
    close $fin

    verb "store original cell"
    dict set original $cellid $netlist
    switch -glob $option_enlarge {
        "nand"  {set netlist [enlarge_nand! "char" [dict get $original $cellid]]}
        "nor"   {set netlist [enlarge_nor!  "char" [dict get $original $cellid]]}
        "aoi"   {set netlist [enlarge_nand! "number" [dict get $original $cellid]]}
        "oai"   {set netlist [enlarge_nor!  "number" [dict get $original $cellid]]}
        default {}
    }
    if {$option_buffer} {
        set netlist [enlarge_inv! $netlist]
    }
    dict set newcells $option_newcell $netlist
    set library $newcells

    verb "export results"
    set counter 0

    puts -nonewline "generated... "
    foreach cellid [dict keys $newcells] {
        export! $option_path $cellid $newcells
        puts -nonewline "$cellid.cell "
        incr counter
    }

    verb "thanks for all the fish!"
    puts ""
    puts "total: $counter cells"

} else {
    puts stderr "Oops. '$option_original' does not exist!"
}

