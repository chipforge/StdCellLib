#!/usr/bin/env tclsh
#   ************    LibreSilicon's StdCellLibrary   *******************
#
#   Organisation:   Chipforge
#                   Germany / European Union
#
#   Profile:        Chipforge focus on fine System-on-Chip Cores in
#                   Verilog HDL Code which are easy understandable and
#                   adjustable. For further information see
#                           www.chipforge.org
#                   there are projects from small cores up to PCBs, too.
#
#   File:           StdCellLib/Tool/tcl/cell2schematic
#
#   Purpose:        Generates schematic file formats from cell description
#
#   ************    Tcl 8.6 Shell Script    ***************************
#
#   ///////////////////////////////////////////////////////////////////
#
#       Copyright (c)   2018 by
#                       SANKOWSKI, Hagen - hsank@nospam.chipforge.org
#
#   This source file may be used and distributed without restriction
#   provided that this copyright statement is not removed from the
#   file and that any derivative work contains the original copyright
#   notice and the associated disclaimer.
#
#   This source is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This source is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#    (__)  You should have received a copy of the GNU General Public
#    oo )  License along with this program; if not, write to the
#    /_/|  Free Software Foundation Inc., 51 Franklin St., 5th Floor,
#          Boston, MA 02110-1301, USA
#
#   GNU General Public License v3.0 - http://www.gnu.org/licenses/gpl-3.0.html
#   ///////////////////////////////////////////////////////////////////

#   -------------------------------------------------------------------
#                       DESCRIPTION
#   -------------------------------------------------------------------

#   -------------------------------------------------------------------
#                       DEFINITIONS
#   -------------------------------------------------------------------

#   ------------    proc 'verbose!' -----------------------------------
proc verb {str} {
     global verbose
     if {$verbose} {
        puts $str
     }
}


#   ------------    proc 'import'   -----------------------------------

#   read cell file

proc import {f} {

    set netlist {}
    # read in
    seek $f 0 start
    while {[gets $f line] >= 0} {
        if {[lsearch -glob [split $line] ".*"] == -1} {
            set netlist [lappend netlist $line]
        }
    }

    # done
    return $netlist
}

#   -------------------------------------------------------------------
#                       Auxilary FUNCTIONS
#   -------------------------------------------------------------------

#   ------------    proc 'length'   -----------------------------------

#   find longest column in netlist between two points

proc length? {path from to netlist} {

    set length 0
    set result 0
    verb "length from $from to $to is $length for $path"

    foreach mosfet $netlist {
        # check mosfet type
        if {[string compare -nocase [lindex $mosfet 3] $from] == 0} {
            if {[string compare -nocase [lindex $mosfet 2] $to] == 0} {
                if {$length == 0} {
                    # 1st founding
                    set length 1
                }
            } else {
                # while current $to does not match target, go deeper and check result
                set result [expr [length? [list $path $mosfet] [lindex $mosfet 2] $to $netlist] +1]
                if {$result > $length} {
                    # means, last recursive call gots a longer path
                    set length $result
                }
            }
        }
    }

    verb "length from $from to $to is $length"
    # done
    return $length
}

#   ------------    proc 'tpmos'    -----------------------------------

#   calculate number of stacked pmos transistors

proc tpmos {netlist} {

    # collect pmos transistors
    set net {}
    foreach mosfet $netlist {
        if {[string compare -nocase [lindex $mosfet 0] "pmos"] == 0} {
            set net [lappend net $mosfet]
        }
    }

    # work out
    set length [length? {} "vdd" "Y" $net]

    # verbose message
    verb "tpmos: $length"

    # done
    return $length
}

#   ------------    proc 'tnmos'    -----------------------------------

#   calculate number of stacked nmos transistors

proc tnmos {netlist} {

    # collect nmos transistor
    set net {}
    foreach mosfet $netlist {
        if {[string compare -nocase [lindex $mosfet 0] "nmos"] == 0} {
            set net [lappend net $mosfet]
        }
    }

    # work out
    set length [length? {} "gnd" "Y" $net]

    # verbose message
    verb "tnmos: $length"

    # done
    return $length
}

#   ------------    proc 'ttotal'   -----------------------------------

#   count number of all transistors

proc ttotal {netlist} {

    # work out
    set length [llength $netlist]

    verb "ttotal: $length = llength $netlist"

    # done
    return $length
}

#   ------------    proc 'eval_mosfets  -------------------------------

#   evaluate netlist - get parallel mosfets for one node (which has 'node' on drain)

proc eval_mosfets {node ttype netlist} {

    # collect 'ttype' transistor
    set unsorted {}
    foreach mosfet $netlist {
        if {[string compare -nocase [lindex $mosfet 0] $ttype] == 0} {
            if {[string compare -nocase [lindex $mosfet 2] $node] == 0} {
                set unsorted [lappend unsorted $mosfet]
            }
        }
    }

    # sort
    set sorted [lsort -increasing $unsorted]

    # verbose message
    verb "eval_mosfets for node $node and ttype $ttype: $sorted"

    # done
    return $sorted
}

#   ------------    proc 'eval_nodes    -------------------------------

#   evaluate netlist - get intermediate nodes (collected via source pin)

proc eval_nodes {netlist} {

    set nodes {}
    foreach mosfet $netlist {
        set nodes [lappend nodes [lindex $mosfet 3]]
    }

    # verbose message
    verb "eval_inodes: $nodes"
    
    return $nodes
}

#   ------------    proc 'outputs?' -----------------------------------

#   list (all?) outputs involved in any network in a drecreasing order

proc outputs? {netlist} {

    # collect nodes on drain
    set unsorted {}
    foreach mosfet $netlist {
        set drain [lindex $mosfet 2]
        if {![string is entier $drain]} {
            lappend unsorted $drain
        }
    }

    # sort inputs
    set outputs [lsort -decreasing -unique -dictionary $unsorted]

    # verbose message
    verb "outputs?: $outputs"

    # done
    return $outputs
}

#   ------------    stuff on grid  ------------------------------------

    # proc 'xsize' - get size on the x-axis
    proc xsize {xgrid tpmos tnmos} {
        # the width on X is the longest path for pullup and pulldown nets
        return [expr ([expr $tpmos > $tnmos? $tpmos : $tnmos] * $xgrid) + $xgrid]
    }

    # proc 'ysize' - get size on the y-axis
    proc ysize {ygrid tpmos tnmos} {
        # the higth on Y is sum of longest path on both nets
        return [expr ($tpmos + $tnmos) * $ygrid +2]
    }

    # proc 'ymid' - calculate middle point on y-axis
    proc ymid {ygrid tpmos tnmos} {
        # literaly the higth of pulldown net
        return [expr ($tnmos * $ygrid) + 1]
    }

#   -------------------------------------------------------------------
#                       LaTeX FUNCTIONS
#   -------------------------------------------------------------------

#   ------------    proc 'fopen'    -----------------------------------

#   open export file

proc fopen {path cellid} {

    global option_graphic

    # open cell output file
    if {$option_graphic == "LaTeX"} {
        set datafile [file join $path $cellid\_schematic.tex]
    } else {
        puts stderr "$option_graphic not supported"
        exit
    }
    set f [open $datafile w]

    # verbose message
    verb "fopen: $datafile"

puts $f "%%  ************    LibreSilicon's StdCellLibrary   *******************"
puts $f "%%"
puts $f "%%  Organisation:   Chipforge"
puts $f "%%                  Germany / European Union"
puts $f "%%"
puts $f "%%  Profile:        Chipforge focus on fine System-on-Chip Cores in"
puts $f "%%                  Verilog HDL Code which are easy understandable and"
puts $f "%%                  adjustable. For further information see"
puts $f "%%                          www.chipforge.org"
puts $f "%%                  there are projects from small cores up to PCBs, too."
puts $f "%%"
puts $f "%%  File:           StdCellLib/Documents/LaTeX/$cellid\_schematic.tex"
puts $f "%%"
puts $f "%%  Purpose:        Auto-generated Schematic File for $cellid"
puts $f "%%"
puts $f "%%  ************    LaTeX with circdia.sty package      ***************"
puts $f "%%"
puts $f "%%  ///////////////////////////////////////////////////////////////////"
puts $f "%%"
puts $f "%%  Copyright (c) [clock format [clock seconds] -format %Y] by chipforge <hsank@nospam.chipforge.org>"
puts $f "%%  All rights reserved."
puts $f "%%"
puts $f "%%      This Standard Cell Library is licensed under the Libre Silicon"
puts $f "%%      public license; you can redistribute it and/or modify it under"
puts $f "%%      the terms of the Libre Silicon public license as published by"
puts $f "%%      the Libre Silicon alliance, either version 1 of the License, or"
puts $f "%%      (at your option) any later version."
puts $f "%%"
puts $f "%%      This design is distributed in the hope that it will be useful,"
puts $f "%%      but WITHOUT ANY WARRANTY; without even the implied warranty of"
puts $f "%%      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
puts $f "%%      See the Libre Silicon Public License for more details."
puts $f "%%"
puts $f "%%  ///////////////////////////////////////////////////////////////////"
puts $f "\\begin\{center\}"

    # done
    return $f
}

#   ------------    proc 'fexport'      -------------------------------

#   write LaTeX figure

proc fexport {f cellid netlist} {

    global xgrid
    global ygrid

    global tpmos
    global tnmos
    global ttotal

    global xsize
    global ysize
    global ymid

    # proc 'caption' - write out 'caption' line
    proc caption {f nstages tpmos tnmos ttotal} {

        # conversation table: number -> word
        set table {zero one two three four five six seven eigth}

puts $f [format "    Schematic (%s stage, %d\$T_\{p\}\$/%d\$T_\{n\}\$ stacked, %d\$T\$ total)" [lindex $table $nstages] $tpmos $tnmos $ttotal]
    }

    # proc 'figure_header' - write out 'figure' header
    proc figure_header {f xsize ysize} {

        global option_squared
        if {$option_squared} {set squared "\[draft*\]"} else {set squared ""}

puts $f "    \\begin\{figure\}\[h\]"
puts $f "        \\begin\{center\}"
puts $f "            \\begin\{circuitdiagram\}$squared\{$xsize\}\{$ysize\}"
    }

    # proc 'figure_footer' - write out 'figure' footer
    proc figure_footer {f} {
puts $f "            \\end\{circuitdiagram\}"
puts $f "        \\end\{center\}"
puts $f "    \\end\{figure\}"
    }

    # proc 'puts_nmos' - template for nmos transistor
    proc puts_nmos {f gate name x y} {
        # all coordinates are relative to the junction grid, nmos below
verb "puts_nmos gate:$gate name:$name x:$x y:$y"
puts $f "                \% ---- '*$name' nmos pattern ----"
puts $f "                \\trans\[\\wireUD\{0.5\}\]\{nenh*\}\{[expr $x -2]\}\{[expr $y -3]\}\{R\}\{\$*\_\{$name\}\$\}\{\}"
puts $f "                \\pin\{[expr $x -5]\}\{[expr $y -4.5]\}\{L\}\{$gate\}"
    }

    # proc 'puts_pmos' - template for pmos transistor
    proc puts_pmos {f gate name x y} {
        # all coordinates are relative to the junction grid, pmos above
puts $f "                \% ---- '*$name' pmos pattern ----"
puts $f "                \\trans\[\\wireUD\{0.5\}\]\{penh*\}\{[expr $x -2]\}\{[expr $y +3]\}\{R\}\{\}\{\$*\_\{$name\}\$\}"
puts $f "                \\pin\{[expr $x -5]\}\{[expr $y +4.5]\}\{L\}\{$gate\}"
    }

    # proc 'puts_gnd' - template for ground symbol
    proc puts_gnd {f x y} {
        # all coordinates are relative to the junction grid
#puts $f "                \% ---- ground symbol pattern ----"
puts $f "                \\ground\{$x\}\{$y\}\{D\}"
    }

    # proc 'puts_vdd' - template for power symbol
    proc puts_vdd {f x y} {
        # all coordinates are relative to the junction grid
#puts $f "                 \% ---- power symbol pattern ----"
puts $f "                \\power\{$x\}\{$y\}\{U\}\{\}"
    }

    # proc 'puts_junc' - template for junction
    proc puts_junc {f x y} {
        # all coordinates are relative to the junction grid
#puts $f "                \% ---- junction pattern ----"
puts $f "                \\junct\{$x\}\{$y\}"
    }

    # proc 'puts_out' - template for output
    proc puts_out {f out x y} {
        # all coordinates are relative to the junction grid (right off)
verb "puts_out $f $out $x $y"
puts $f "                \% ---- output pattern ----"
puts $f "                \\pin\{[expr $x +4]\}\{$y\}\{R\}\{$out\}"
puts $f "                \\wire\{$x\}\{$y\}\{[expr $x +3]\}\{$y\}"
    }

    # proc 'puts_wire' - template for output
    proc puts_wire {f xstart ystart xend yend} {
        # all coordinates are relative to the junction grid (right off)
verb "puts_wire $f $xstart $ystart $xend $yend"
puts $f "                \\wire\{$xstart\}\{$ystart\}\{$xend\}\{$yend\}"
    }

    # proc 'stages' - guesses the stages of the design - simplified version just recognizes one and 2 stages
    proc stages {netlist} {
        foreach mosfet $netlist {
            # If there is a transistor with Y as input we definitely have at least 2 stages
            verb "Searching for Y: [lindex $mosfet 1]"
            if {[string compare -nocase [lindex $mosfet 1] "Y"] == 0} {
                 return 2
            }
        }
        return 1
    }

    # start with figure header
    caption $f [stages $netlist] $tpmos $tnmos $ttotal
    figure_header $f $xsize $ysize

    verb "pullup:[pullup!   $f $xgrid $ymid "Y" $netlist]"
    verb "pulldown:[pulldown! $f $xgrid $ymid "Y" $netlist]"
    verb "center:[center! $f [lindex [outputs? $netlist] 0] $xgrid [expr $xsize - $xgrid]]"

#    # place seed pair first, which are always this with input A
#    puts_pmos $f A PA 7 $ymid
#    puts_nmos $f A NA 7 $ymid
#    puts_junc $f      7 $ymid

#    foreach mosfet $netlist {
#        puts_vdd  $f      7 14
#        puts_gnd  $f      7 0
#    }

    # end with figure footer
    figure_footer $f

    # done
}

#   ------------    proc 'fclose'   -----------------------------------

#   close export file

proc fclose {f} {

puts $f "\\end\{center\}"

    # done
    close $f
}


#   -------------------------------------------------------------------
#                       MAIN
#   -------------------------------------------------------------------

#   ------------    Command line parsing     --------------------------

package require cmdline;

#   define program options
set options {
    {d                  "draft / draw on squared paper" }
    {i.arg "./"         "specify input directory - default" }
    {o.arg "./"         "specify output directory - default" }
    {g.arg "LaTeX"      "which output graphic format use - default" }
    {v                  "verbose" }
}

#   define program usage
set usage "- Generate schematic file formats from cell description"

#   error trap
try {
    array set params [cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
    # Trap the usage signal, print the massage, and exit the application.
    # Note: Others errors are not caught and passed through to higher levels!
    puts $msg
    exit -1 
}

#   set argv from command lines
set option_cell [string cat $params(i) "/" [regsub {\.cell$} [lindex $argv end end] ""] ".cell"] ; # input file
set option_squared $params(d) ; # draft / draw on squared paper
set option_graphic $params(g) ; # file format
set option_path $params(o) ; # output directory
set verbose $params(v); 

#   verbose message
if {$verbose} {
    puts "[clock format [clock seconds] -gmt 1]"
    puts "option_path (-o): $option_path"
    puts "option_graphic (-g):  $option_graphic"
    puts "option_cell: $option_cell"
    puts "option_squared: $option_squared"
}

#   ------------    generate    ---------------------------------------

if {[file exist $option_cell]} {

    # unplug cellid
    set cellid [lindex [split [file tail $option_cell] "."] 0]

    # open cell input file
    set fin [open $option_cell r]

    set netlist [import $fin]
    close $fin

    set xgrid 9
    set ygrid 6

    set tpmos [tpmos $netlist]
    set tnmos [tnmos $netlist]
    set ttotal [ttotal $netlist]

    set xsize [xsize $xgrid $tpmos $tnmos]
    set ysize [ysize $ygrid $tpmos $tnmos]
    set ymid  [ymid  $ygrid $tpmos $tnmos]

    # layout pulldown network, returns next junct coordinate on x-axis
    proc pulldown! {f xjunc yjunc node netlist} {

        global xgrid
        global ygrid
        global ymid
        verb "pulldown()"
        # chunk of work
        set todo [eval_mosfets $node "nmos" $netlist]
        set length [llength $todo]
	verb "pulldown length: $length todo: $todo"

        # layout known mosfet for 'node'
        for {set i 0} {$i < $length} {incr i} {
            set mosfet [lindex $todo $i]
	    verb "pulldown nmos i:$i xgrid:$xgrid xjunc:$xjunc yjunc:$yjunc mosfet:$mosfet"
            puts_nmos $f [lindex $mosfet 1] [string cat "N" [lindex $mosfet 1]] [expr ($i * $xgrid) + $xjunc ] $yjunc
	    if {$i >= 1} {
                # TODO: Here we are potentially drawing too many and connecting nets that are not supposed to be connected. We should check for that 
                puts_wire $f [expr ($i * $xgrid) - $xgrid + $xjunc ] $yjunc [expr ($i * $xgrid) + $xjunc ] $yjunc
            }
        }

        set xnext [expr $xjunc + ($length * $xgrid)]
        verb "pulldown xnext $xnext"

        # evaluate row below
        set nodes [eval_nodes $todo]
	verb "pulldown nodes $nodes"
        set ynext [expr $yjunc - $ygrid]
	verb "pulldown ynext $ynext"

        for {set i 0} {$i < [llength $nodes]} {incr i} {
            set node [lindex $nodes $i]
	    verb "pulldown i:$i node:$node"
            if {[string compare -nocase $node "gnd"] == 0} {
		verb "pulldown to gnd"
                puts_gnd $f [expr ($i * $xgrid) + $xjunc] $ynext
	    } else {
		verb "pulldown recursive..."
                set result [pulldown! $f [expr $xjunc + ($i * $xgrid)] $ynext $node $netlist]
		verb "pulldown recursive result $result"
                if {$result > $xnext} {
		    verb "pulldown xnext is changed from $xnext to $result"
                    set xnext $result
                }
            }
        }
        verb "Laying out the Pulldown network xjunc:$xjunc yjunc:$yjunc node:$node resulting xnext:$xnext"
        # done
        return $xnext
    }

    # verbose message
    verb "cell: $cellid $netlist"

    # layout pullup network, returns next junct coordinate on x-axis
    proc pullup! {f xjunc yjunc node netlist} {

        global xgrid
        global ygrid
        global ymid

        # chunk of work
        set todo [eval_mosfets $node "pmos" $netlist]
        set length [llength $todo]

        # layout known mosfet for 'node'
        for {set i 0} {$i < $length} {incr i} {
            set mosfet [lindex $todo $i]
            puts_pmos $f [lindex $mosfet 1] [string cat "P" [lindex $mosfet 1]] [expr ($i * $xgrid) + $xjunc ] $yjunc
	    if {$i >= 1} {
                # TODO: Here we are potentially drawing too many and connecting nets that are not supposed to be connected. We should check for that 
                puts_wire $f [expr ($i * $xgrid) - $xgrid + $xjunc ] $yjunc [expr ($i * $xgrid) + $xjunc ] $yjunc
            }

        }

        set xnext [expr $xjunc + ($length * $xgrid)]

        # evaluate row below
        set nodes [eval_nodes $todo]
        set ynext [expr $yjunc + $ygrid]
        for {set i 0} {$i < [llength $nodes]} {incr i} {
            set node [lindex $nodes $i]
            if {[string compare -nocase $node "vdd"] == 0} {
                puts_vdd $f [expr ($i * $xgrid) + $xjunc] $ynext
            } else {
                set result [pullup! $f [expr $xjunc + ($i * $xgrid)] $ynext $node $netlist]
                if {$result > $xnext} {
                    set xnext $result
                }
            }
        }
        verb "Laying out the Pullup network xjunc:$xjunc yjunc:$yjunc node:$node resulting xnext:$xnext"

        # done
        return $xnext
    }

    # layout center line and output
    proc center! {f out xstart xend} {

        global xgrid
        global ymid

        # work out
        puts_out  $f $out $xend $ymid
        puts_wire $f $xstart $ymid $xend $ymid
    }

    set fout [fopen $option_path $cellid]
    fexport $fout $cellid $netlist
    fclose $fout


} else {
    puts stderr "Oops. '$option_cell' does not exist!"
}

