#!/usr/bin/env tclsh
#   ************    LibreSilicon's StdCellLibrary   *******************
#
#   Organisation:   Chipforge
#                   Germany / European Union
#
#   Profile:        Chipforge focus on fine System-on-Chip Cores in
#                   Verilog HDL Code which are easy understandable and
#                   adjustable. For further information see
#                           www.chipforge.org
#                   there are projects from small cores up to PCBs, too.
#
#   File:           StdCellLib/Tool/tcl/_switch
#
#   Purpose:        Generates Verilog switch model from cell description
#
#   ************    Tcl 8.6 Shell Script    ***************************
#
#   ///////////////////////////////////////////////////////////////////
#
#       Copyright (c)   2018 by
#                       SANKOWSKI, Hagen - hsank@nospam.chipforge.org
#
#   This source file may be used and distributed without restriction
#   provided that this copyright statement is not removed from the
#   file and that any derivative work contains the original copyright
#   notice and the associated disclaimer.
#
#   This source is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This source is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#    (__)  You should have received a copy of the GNU General Public
#    oo )  License along with this program; if not, write to the
#    /_/|  Free Software Foundation Inc., 51 Franklin St., 5th Floor,
#          Boston, MA 02110-1301, USA
#
#   GNU General Public License v3.0 - http://www.gnu.org/licenses/gpl-3.0.html
#   ///////////////////////////////////////////////////////////////////

#   -------------------------------------------------------------------
#                       DESCRIPTION
#   -------------------------------------------------------------------

#   -------------------------------------------------------------------
#                       DEFINITIONS
#   -------------------------------------------------------------------

#   ------------    proc 'import'   -----------------------------------

#   read cell file

proc import {f} {

    global verbose

    set netlist {}
    # read in
    seek $f 0 start
    while {[gets $f line] >= 0} {
        if {[lsearch -glob [split $line] ".*"] == -1} {
            set netlist [lappend netlist $line]
        }
    }

    # done
    return $netlist
}

#   -------------------------------------------------------------------
#                       Auxilary FUNCTIONS
#   -------------------------------------------------------------------

#   ------------    proc 'inputs?'  -----------------------------------

#   list all inputs involved in any network in a drecreasing order

proc inputs? {netlist} {

    global verbose

    # collect all inputs from all networks
    set unsorted {}
    foreach mosfet $netlist {
        lappend unsorted [lindex $mosfet 1]
    }

    # sort inputs
    set inputs [lsort -decreasing -unique -dictionary $unsorted]

    # verbose message
    if {$verbose} {
        puts "inputs?: $inputs"
    }

    # done
    return $inputs
}

#   ------------    proc 'outputs?' -----------------------------------

#   list (all?) outputs involved in any network in a drecreasing order

proc outputs? {netlist} {

    global verbose

    # collect nodes on drain
    set unsorted {}
    foreach mosfet $netlist {
        set drain [lindex $mosfet 2]
        if {![string is entier $drain]} {
            lappend unsorted $drain
        }
    }

    # sort inputs
    set outputs [lsort -decreasing -unique -dictionary $unsorted]

    # verbose message
    if {$verbose} {
        puts "outputs?: $outputs"
    }

    # done
    return $outputs
}

#   ------------    proc 'nodes?    -----------------------------------

#   evaluate netlist - get intermediate nodes (collected via source pin)

proc nodes? {netlist} {

    global verbose

    set nodes {}
    foreach mosfet $netlist {
        set nodes [lappend nodes [lindex $mosfet 3]]
    }

    # verbose message
    if {$verbose} {
        puts "inodes?: $nodes"
    }

    # done
    return $nodes
}

#   -------------------------------------------------------------------
#                       Verilog FUNCTIONS
#   -------------------------------------------------------------------

#   open export file

proc fopen {path cellid} {

    global verbose
    global option_graphic

    # open cell output file
    set datafile [file join $path $cellid\_switch.v]
    set f [open $datafile w]

    # verbose message
    if {$verbose} {
        puts "fopen: $datafile"
    }

puts $f "//  ************    LibreSilicon's StdCellLibrary   *******************"
puts $f "//"
puts $f "//  Organisation:   Chipforge"
puts $f "//                  Germany / European Union"
puts $f "//"
puts $f "//  Profile:        Chipforge focus on fine System-on-Chip Cores in"
puts $f "//                  Verilog HDL Code which are easy understandable and"
puts $f "//                  adjustable. For further information see"
puts $f "//                          www.chipforge.org"
puts $f "//                  there are projects from small cores up to PCBs, too."
puts $f "//"
puts $f "//  File:           StdCellLib/Sources/verilog/$cellid\_switch.v"
puts $f "//"
puts $f "//  Purpose:        Auto-generated switch-level model for $cellid"
puts $f "//"
puts $f "//  ************    IEEE Std 1364-2001 (Verilog HDL)    ***************"
puts $f "//"
puts $f "//  ///////////////////////////////////////////////////////////////////"
puts $f "//"
puts $f "//  Copyright (c) [clock format [clock seconds] -format %Y] by chipforge <hsank@nospam.chipforge.org>"
puts $f "//  All rights reserved."
puts $f "//"
puts $f "//      This Standard Cell Library is licensed under the Libre Silicon"
puts $f "//      public license; you can redistribute it and/or modify it under"
puts $f "//      the terms of the Libre Silicon public license as published by"
puts $f "//      the Libre Silicon alliance, either version 1 of the License, or"
puts $f "//      (at your option) any later version."
puts $f "//"
puts $f "//      This design is distributed in the hope that it will be useful,"
puts $f "//      but WITHOUT ANY WARRANTY; without even the implied warranty of"
puts $f "//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
puts $f "//      See the Libre Silicon Public License for more details."
puts $f "//"
puts $f "//  ///////////////////////////////////////////////////////////////////"

puts $f ""
puts $f "//  -------------------------------------------------------------------"
puts $f "//                          SWITCH-LEVEL MODEL"
puts $f "//  -------------------------------------------------------------------"
puts $f ""

    # done
    return $f
}

#   ------------    proc 'fexport'      -------------------------------

#   write Switch model

proc fexport {f cellid netlist} {

    # proc 'module!' - write out module definition
    proc module! {f cellid outputs inputs} {

puts $f "module $cellid\_switch \("
puts -nonewline $f "    output              [lindex $outputs 0]"

        foreach input $inputs {
puts -nonewline $f "\,\n    input               $input"
        }
puts $f "\n\)\;"
puts $f ""
puts $f "    supply1             vdd;"
puts $f "    supply0             gnd;"
    }

    # proc 'y_stage!' - write out stage regarding 'Y'
    proc y_stage! {f netlist} {

puts $f ""
puts $f "//  --------------------    y-stage     -------------------------------"
puts $f ""
        foreach node [nodes? $netlist] {
            if {[string is entier $node]} {
puts $f "    wire                n$node;"
            }
        }
puts $f ""
puts $f "// type name (drain source gate);"
        foreach mosfet $netlist {

            set ttype [lindex $mosfet 0]
puts -nonewline $f "$ttype " ; # type
            if {[string compare -nocase $ttype "pmos"] == 0} {
puts -nonewline $f "MP[lindex $mosfet 1] " ; # name
            } elseif {[string compare -nocase $ttype "nmos"] == 0} {
puts -nonewline $f "MN[lindex $mosfet 1] " ; # name
            }

            set drain [lindex $mosfet 2]
            if {[string is entier $drain]} {
puts -nonewline $f "\(n$drain, "
            } else {
puts -nonewline $f "\($drain, "
            }

            set src [lindex $mosfet 3]
            if {[string is entier $src]} {
puts -nonewline $f "n$src, "
            } else {
puts -nonewline $f "$src, "
            }

            set gate [lindex $mosfet 1]
            if {[string is entier $gate]} {
puts $f "n$gate\);"
            } else {
puts $f "$gate\);"
            }
        }
    }

    # start with header
    set inputs  [inputs? $netlist]
    set outputs [outputs? $netlist]
    module! $f $cellid $outputs $inputs

    # "Y" in output list?
    set yout [lsearch [outputs? $netlist] "Y"]
    if {$yout >= 0} {
        y_stage! $f $netlist
    }

    # "Z" in output list?
    set zout [lsearch [outputs? $netlist] "Z"]
    if {$zout >= 0} {
        z_stage! $f $netlist
    }

}

#   ------------    proc 'fclose'   -----------------------------------

#   close export file

proc fclose {f} {

puts $f ""
puts $f "endmodule"

    # done
    close $f
}

#   -------------------------------------------------------------------
#                       MAIN
#   -------------------------------------------------------------------

#   ------------    Command line parsing     --------------------------

package require cmdline;

#   define program options
set options {
    {i.arg "./"         "specify input directory - default" }
    {o.arg "./"         "specify output directory - default" }
    {f.arg "verilog"    "which model format - default" }
    {v                  "verbose" }
}

#   define program usage
set usage "- Collects manpage sheet from cell description"

#   error trap
try {
    array set params [cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
    # Trap the usage signal, print the massage, and exit the application.
    # Note: Others errors are not caught and passed through to higher levels!
    puts $msg
    exit -1 
}

#   set argv from command lines
set option_cell [string cat $params(i) "/" [lindex $argv end end] ".cell"] ; # input file
set option_format $params(f) ; # file format
set option_path $params(o) ; # output directory
set verbose $params(v); 

#   verbose message
if {$verbose} {
    puts "[clock format [clock seconds] -gmt 1]"
    puts "option_path (-o): $option_path"
    puts "option_format (-f):  $option_format"
    puts "option_cell: $option_cell"
}

#   ------------    generate    ---------------------------------------

if {[file exist $option_cell]} {

    # unplug cellid
    set cellid [lindex [split [file tail $option_cell] "."] 0]

    # open cell input file
    set fin [open $option_cell r]

    set netlist [import $fin]
    close $fin

    set fout [fopen $option_path $cellid]
    fexport $fout $cellid $netlist
    fclose $fout


} else {
    puts stderr "Oops. '$option_cell' does not exist!"
}

